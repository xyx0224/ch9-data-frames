source('~/Desktop/INFO201/a2-core-skills-xyx0224/assignment.R')
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
is.data.frame(USPersonalExpenditure)
# Load R's "USPersonalExpenditure" dataset using the `data()` function
# This will produce a data frame called `USPersonalExpenditure`
data(USPersonalExpenditure)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data(USPersonalExpenditure)
# The variable `USPersonalExpenditure` is now accessible to you. Unfortunately,
# it's not a data frame (it's actually what is called a matrix)
# Test this using the `is.data.frame()` function
is.data.frame(USPersonalExpenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
usp_personal_expenditure <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(usp_personal_expenditure)
# Luckily, you can pass the USPersonalExpenditure variable as an argument to the
# `data.frame()` function to convert it a data farm. Do this, storing the
# result in a new variable
usp_personal_expenditure <- data.frame(USPersonalExpenditure, stringsAsFactors = FALSE)
# What are the column names of your dataframe?
colnames(usp_personal_expenditure)
# What are the row names of your dataframe?
rownames(usp_personal_expenditure)
# Add a column "category" to your data frame that contains the rownames
usp_personal_expenditure$category <- rownames(usp_personal_expenditure)
View(usp_personal_expenditure)
# How much money was spent on personal care in 1940?
usp_personal_expenditure[Personal Care][1]
# How much money was spent on personal care in 1940?
usp_personal_expenditure["Personal Care"][1]
# How much money was spent on personal care in 1940?
usp_personal_expenditure[4][1]
# How much money was spent on personal care in 1940?
usp_personal_expenditure[4][1]
# How much money was spent on personal care in 1940?
usp_personal_expenditure$X1940[4]
# How much money was spent on Food and Tobacco in 1960?
usp_personal_expenditure$X1960[1]
# What was the highest expenditure category in 1960?
max(usp_personal_expenditure$1960)
# What was the highest expenditure category in 1960?
max(usp_personal_expenditure$X1960)
return(min(usp_personal_expenditure$year))
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
return(min(usp_personal_expenditure$year))
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(usp_personal_expenditure, lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(rownames(usp_personal_expenditure), lowest_category)
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(colnames(usp_personal_expenditure), lowest_category)
# What are the column names of your dataframe?
colnames(usp_personal_expenditure)
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
if (year != "category") {
return(min(usp_personal_expenditure$year))
}
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(colnames(usp_personal_expenditure), lowest_category)
source('~/Desktop/INFO201/a2-core-skills-xyx0224/assignment.R')
install.packages("stringr")
styler:::style_active_file()
lynter:::style_active_file()
lintr:::style_active_file()
setwd("~/Desktop/INFO201/a2-core-skills-xyx0224")
lintr:::absolute_path_types
lintr:::absolute_paths_linter()
lintr:::default_linters
setwd("~/Desktop/INFO201/a2-core-skills-xyx0224")
lintr:::absolute_path_types
lintr:::absolute_path_types(assignment.R)
source('~/Desktop/INFO201/a2-core-skills-xyx0224/assignment.R')
install.packages("stringr")
install.packages("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 20
# Create a variable `my_name` that is equal to your first name
my_name <- "Yixin"
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 365
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day - hours_in_a_year > 0
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args: name, and age.
# This function should return a string value that says
# "Hello, my name is {name}, and I'm {age} years old.".
make_introduction <- function(name, age) {
return(paste0("Hello, my name is ", name, ", and I'm ", age, " years old."))
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is ",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- gsub("Hello, my name is", "Hey, I'm", my_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
loud_intro <- toupper(my_intro)
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
quiet_intro <- tolower(my_intro)
# Create a new variable `capitalized`, which is your `my_intro` variable, but
# with each word capitalized. hint: use the stringr function `str_to_title`
library(stringr)
capitalized <- str_to_title(my_intro)
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
occurrences <- str_count(my_intro, "e")
# Write a function `double()` that takes in a value and
# returns that value times two
double <- function(value) {
return(value * 2)
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
return(value^3)
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("The Royal Tenenbaums", "Coco", "Blade Runner", "Love, Simon",
"Thelma and Louise", "Isle of Dogs")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, "is a great movie!")
# Create a vector `without_four` by omitting the fourth element from `movies`
# Again, do this by subsetting the vector, not by simply retyping the movies
without_four <- movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- 700:999
# Using the built in `length()` function, create a variable `len` that is
# equal to the length of your vector `numbers`
len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that is the numbers 500:699
lower_numbers <- 500:699
# Create a vector `all_numbers` that combines `lower_numbers` and `numbers`
all_numbers <- c(lower_numbers, numbers)
# Dates ------------------------------------------------------------------------
# Use the appropriate function to create a variable `today` storing today's date
# Make sure to use R to get the *current date*
# See https://stat.ethz.ch/R-manual/R-devel/library/base/html/Sys.time.html
today <- Sys.Date()
# Create a variable `summer_break` that represents the first day of summer break
# (June 8, 2018). Make sure to use the `as.Date` function again
summer_break <- as.Date("2018-06-08", "%Y-%m-%d")
# Create a variable `days_to_break` that is how many days until break
# Hint: subtract the dates!
days_to_break <- summer_break - today
# Define a function `make_birthday_intro()` that takes in three arguments:
# a name, an age, and a character string for your next (upcoming) birthday.
# This method should return a character string of the format:
# "Hello, my name is {name}, and I'm {age} years old.
#  In {N} days I'll be {new_age}."
# You must utilize your `make_introduction()` function from Part 1,
# and compute {N} and {new_age} in your function
make_birthday_intro <- function(name, age, bday) {
my_birthday <- as.Date(bday, "%Y-%m-%d")
today <- Sys.Date()
diff <- my_birthday - today
bday_phrase <- paste0("In ", diff, " days I'll be ", age + 1)
intro <- make_introduction(name, age)
return(paste(intro, bday_phrase))
}
# Create a variable `my_bday_intro` using the `make_birthday_intro()` function,
# passing in `my_name`, `my_age`, and your upcoming birthday.
my_bday_intro <- make_birthday_intro(my_name, my_age, "2019-02-24")
# Challenge ------------------------------------------------------------------
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(vector_of_strings) {
end <- length(vector_of_strings)
for (i in 1:end) {
vector_of_strings <- vector_of_strings[-1]
}
return(vector_of_strings)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
programming_courses <- c("INFO 201", "CSE 142")
programming_courses <- remove_digits(programming_courses)
lintr::lint("assignment.R")
return(value ^ 3)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(value) {
return(value ^ 3)
}
lintr::lint("assignment.R")
source('~/Desktop/INFO201/a2-core-skills-xyx0224/assignment.R')
install.packages("stringr")
lintr::lint("assignment.R")
source('~/Desktop/INFO201/a2-core-skills-xyx0224/assignment.R')
install.packages("stringr")
lintr::lint("assignment.R")
lintr::lint("assignment.R")
source('~/Desktop/INFO201/a2-core-skills-xyx0224/assignment.R')
install.packages("stringr")
return(min(usp_personal_expenditure$year))
# Define a function `lowest_category` that takes in a year as a parameter, and
# returns the lowest spending category of that year
lowest_category <- function(year) {
col <- paste0("X", year)
return(min(usp_personal_expenditure$year))
}
# Using your function, determine the lowest spending category of each year
# Hint: use the `sapply()` function to apply your function to a vector of years
sapply(seq(1940, 1960, 5), lowest_category)
lintr::lint("assignment.R")
source('~/Desktop/INFO201/a2-core-skills-xyx0224/assignment.R')
install.packages("stringr")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
setwd("~/Desktop/INFO201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
setwd("~/Desktop/INFO201/ch9-data-frames/exercise-4")
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv(data/gates_money.csv, stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
oraganization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
mean(grants$total_amount)
# What was the dollar amount of the largest grant?
max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min(grants$total_amount)
# What was the dollar amount of the largest grant?
max_grant <- max(grants$total_amount)
# What was the dollar amount of the smallest grant?
min_grant <- min(grants$total_amount)
# Which organization received the largest grant?
grants[max_grant][organization]
# Which organization received the largest grant?
grants$organization[max_grant]
# Which organization received the largest grant?
largest_grants <- grants[grants$total_amount == max_grant, organization]
# Which organization received the largest grant?
largest_grants <- grants[organization, grants$total_amount == max_grant]
# Which organization received the largest grant?
largest_grants <- grants["organization", grants$total_amount == max_grant]
# Which organization received the largest grant?
largest_grants <- grants[grants$total_amount == max_grant, "organization"]
# Which organization received the smallest grant?
smallest_grants <- grants[grants$total_amount == min_grant, "organization"]
# How many grants were awarded in 2010?
grant_in_2010 <- nrow(grants$start_year == 2010)
# How many grants were awarded in 2010?
grant_in_2010 <- length(grants$start_year == 2010)
# How many grants were awarded in 2010?
grant_in_2010 <- length(grants$start_year[grants$start_year == 2010])
